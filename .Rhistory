if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax(x[2]])))},MARGIN=1)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
uppos
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
uppos
downpos
x = c(1,2,1,2,1,2,1)
plot(x)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
uppos = findInterval(localmax,localmin)
uppos
localmax
localmin
?lines
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
uppos
?apply
uppos
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
uppos
downpos
lines(c(1,3),c(x[1],x[3]))
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
x = runif(n=100,1,100)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
plot(x)
plot(x,type='l')
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
plot(x)
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
x = c(2,1,2,1,2,1,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
plot(x)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos
localmax
localmin
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos
downpos = findInterval(localmin,localmax)
downpos
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
downpos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
uppos = apply(uppos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = apply(downpos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2])},MARGIN=1)
downpos = apply(downpos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
downpos
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
if(is.null(downpos[[1]])) downpos = downpos[2:length(downpos)]
downpos
?apply
upposfilterd = list()
uppos = findInterval(localmax,localmin)
downpos = findInterval(localmin,localmax)
uppos
downpos
localmax
localmin
if(localmax[1]<localmin[1])
{
start = localmax[1]
localmax = localmax[-1]
}
x=c(1:6)
y=c(10,10,10)
x[3:6] = y
index(x)
series = rep(0,length(localmax)+length(localmin))
series
odds <- seq(1, length, 2)
odds <- seq(1, 4, 2)
odds
odds = seq(1,length(localmin),2)
evens = seq(1,length(localmax),2)
series[series]
series[odds]
localmin
odds
length(localmin)
?seq
odds = seq(from=1,by=2,length.out=3)
odds
evens = seq(from=1,by=2,length.out=length(localmax))
evens
evens = seq(from=2,by=2,length.out=length(localmax))
evens
?union
intersect(localmin,localmax)
series = rep(0,length(localmax)+length(localmin))
odds = seq(from=1,by=2,length.out=length(localmin))
evens = seq(from=2,by=2,length.out=length(localmax))
for(i in 1:length(odds))
{
series[odds] = localmin[i]
}
for(i in 1:length(evens))
{
series[evens] = localmax[i]
}
series
localmin
localmax
for(i in 1:length(odds))
{
series[odds[i]] = localmin[i]
}
for(i in 1:length(evens))
{
series[evens[i]] = localmax[i]
}
series
for(i in 1:length(evens))
{
series[evens[i]] = localmax[i]
}
while(i <= length(series))
{
print(i)
i= i+1
}
i = 1
while(i <= length(series))
{
print(i)
i= i+1
}
i = 1
lmin = x[localmin[i]]
y= localmin[i]
peaks
require(quantmod)
x=seq(1,100,by=0.5)
y=x^(-1.2)
par(mfrow=c(1,3))
plot(x,y,type='l')
plot(x,log(y),type='l')
plot(log(x),log(y),type='l')
par(mfrow=c(1,1))
install.packages("RMySQL")
pt = function(t,tc,pc,k,B,b){
return(pc - (k*B/b) *(tc-t)^b))
}
pt = function(t,tc,pc,k,B,b){
return(pc - (k*B/b) *(tc-t)^b)
}
tc = 100
t = 1: 100
k = 0.7
b=0.5
B = 2
pc = 1002
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
pc = 1002
tc = 1000
t = 1: 1000
k = 0.7
b=0.5
B = 2
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
pc = 1002
tc = 500
t = 1: 500
k = 0.5
b=0.7
B = 2
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
require('shiny')
#查看示例代码的位置
system.file('examples',package='shiny')
runExample
runExample()
runExample("06_tabsets")
fluidPage
?fluidPage
library(RMySQL)
conn <- dbConnect(MySQL(), dbname = "test", username="root", password="123456",host="127.0.0.1",port=3306)
dbReadTable(conn, "tt")
dbDisconnect(conn)
require('shiny')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("C:/R/code/everydaystudy")
sourceDir("helper")
runApp("web")
runApp("web")
runApp("web")
gsub(' ','  d  ')
?gsub
gsub(' ','  d  ',fixed=T)
gsub(' ',x='  d  ',fixed=T)
gsub(pattern=' ',x='  d  ',fixed=T)
gsub(pattern=' ','',x='  d  ')
gsub(pattern=' ','',x='  d d ')
gsub(' ','',x='  d d ')
runApp("web")
sourceDir("helper")
runApp("web")
runApp("web")
require(string)
install.packages('stringr')
require(stringr)
require(stringr)
require('stringr')
help(package='stringr')
xx = "select * from xx values ('?','?')"
str_replace(xx,c(1,2))
str_replace(xx,'?',c(1,2))
str_replace(xx,'\?',c(1,2))
?str_replace
str_replace(xx,"?",c(1,2))
xx = "select * from xx values ('|','|')"
str_replace(xx,"|",c(1,2))
str_replace_all(xx,"|",c(1,2))
xx
?gsub
gsub('|',c(1,2),x)
gsub('|',c(1,2),xx)
gsub("([ab])", "\\1_\\1_", "abc and ABC")
gsub("ab", "\\1_\\1_", "abc and ABC")
gsub('|',1,xx)
xx
gsub('|',1,xx,fixed=T)
gsub('|',(1:2),xx,fixed=T)
sub('|',1,xx,fixed=T)
paste("insert into sortalltest(title,tag,text,date) values(",'title','tag','text',"now())",sep="")
sql = paste("insert into sortalltest(title,tag,text,date) values(",'title,','tag,','text,',"now())",sep="")
sql
sql = paste("insert into sortalltest(title,tag,text,date) values(","'title,'","'tag,'","'text,'","now())",sep="")
sql
sql = paste("insert into sortalltest(title,tag,text,date) values(","'title',","'tag',","'text',","now())",sep="")
sql
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
runApp("web")
sql = paste("insert into mylog(title,tag,content,date) values(","'1',","'2',","'3',","now())",sep="")
title = 'dfdf'
sql
sql = sub('1',title,sql)
sql
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
sourceDir("helper")
source('helper/mysqlhelper.R')
runApp("web")
title
sql
sql
title
tag
sub('3',title,sql)
sql = paste("insert into mylog(title,tag,content,date) values(","'10',","'2',","'3',","now())",sep="")
sub('10',title,sql)
sql
sql = paste("insert into mylog(title,tag,content,date) values(","'11',","'2',","'3',","now())",sep="")
sql
sql1 = paste("insert into mylog(title,tag,content,date) values(","'11',","'2',","'3',","now())",sep="")
sql1
sub('11',title,sql1)
runApp("web")
title
sql
title
tag
iconv(tag)
?iconv
iconv(title,toRaw=T)
title
iconv(tag,toRaw=T)
iconv(text,toRaw=T)
sub('1',tag,sql)
sub('2',tag,sql)
sub('2',tag,sql)
sub('2',tag,sql,useBytes=T)
gsub('2',tag,sql,useBytes=T)
?str_sub
?str_replace
str_replace(sql,'1',title)
sourceDir("helper")
runApp("web")
runApp("web")
runApp("web")
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
sql = 'select date,title from mylog'
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
sql = 'select date,title from mylog'
rs = dbGetQuery(conn,sql)
rs
dbSendQuery(conn,'SET NAMES utf8')
sql = 'select date,title from mylog'
rs = dbGetQuery(conn,sql)
rs
dbDisconnect(conn)
rs
sourceDir("helper")
runApp("web")
require('shiny')
sourceDir("helper")
runApp("web")
runApp("web")
?DT
help(package='shiny')
runApp("web")
runApp("web")
runApp("web")
runApp("web")
options(shiny.deprecation.messages=FALSE)
library(ggplot2)
runApp("web")
runApp("web")
runApp("web")
runApp("web")
runApp("web")
runApp("web")
?dbGetQuery
runApp("web")
runApp("web")
runApp("web")
runApp("web")
runApp("web")
runApp("web")
runApp("web")
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
dbSendQuery(conn,'SET NAMES GBK')
sql = 'select date,title from mylog'
rs = dbGetQuery(conn,sql)
dbDisconnect(conn)
rs
runApp("web")
runApp("web")
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES GBK')
sql = 'select date,title from mylog'
rs = dbGetQuery(conn,sql)
rs
colnames(rs)
dbDisconnect(conn)
sourceDir("helper")
runApp("web")
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES GBK')
sql = 'select date as 添加日期,title as 标题 from mylog'
rs = dbGetQuery(conn,sql)
dbDisconnect(conn)
rs
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
sourceDir("helper")
runApp("web")
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES GBK')
sql = 'select date as 添加日期,title as 标题 from mylog'
rs = dbGetQuery(conn,sql)
print(rs)
dbDisconnect(conn)
sourceDir("helper")
sourceDir("helper")
runApp("web")
getLog()
getLog <- function()
{
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES GBK')
sql = 'select date as 添加日期,title as 标题 from mylog'
rs = dbGetQuery(conn,sql)
print(rs)
dbDisconnect(conn)
return(rs)
}
runApp("web")
require(quantmod)
require(TTR)
library(blotter)
path = "D:/data/dest"
files = dir(path)
files=c('SH000001.TXT')
files=c('SH000001.TXT')
f= files[1]
f
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
colnames(pricedata)<-c("Open","High","Low","Close","Volume","Amount")
time(pricedata)=as.POSIXct(time(pricedata))
pricedata=as.xts(pricedata)
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep=",",index.column=1)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep="\t",index.column=1)
files = dir(path)
f = files[200]
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep="\t",index.column=1)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep="\t",index.column=1)
files=c('SH000001.TXT')
f = files[1]
print(f)
fname = file.path(path,f)
pricedata = read.zoo(fname,header=FALSE, format = "%m/%d/%Y",sep="\t",index.column=1)
colnames(pricedata)<-c("Open","High","Low","Close","Volume","Amount")
time(pricedata)=as.POSIXct(time(pricedata))
pricedata=as.xts(pricedata)
chartSeries(pricedata[2005:2008])
chartSeries(pricedata["2005/2008"])
chartSeries(pricedata["2013/"])
