localmin = findValleys(x) - 1
uppos = findInterval(localmax,localmin)
uppos
localmax
localmin
?lines
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
uppos
?apply
uppos
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
uppos
downpos
lines(c(1,3),c(x[1],x[3]))
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
x = runif(n=100,1,100)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
plot(x)
plot(x,type='l')
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
plot(x)
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
x = c(2,1,2,1,2,1,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
plot(x)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos
localmax
localmin
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos
downpos = findInterval(localmin,localmax)
downpos
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
downpos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
uppos = apply(uppos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = apply(downpos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2])},MARGIN=1)
downpos = apply(downpos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
downpos
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
if(is.null(downpos[[1]])) downpos = downpos[2:length(downpos)]
downpos
?apply
upposfilterd = list()
uppos = findInterval(localmax,localmin)
downpos = findInterval(localmin,localmax)
uppos
downpos
localmax
localmin
if(localmax[1]<localmin[1])
{
start = localmax[1]
localmax = localmax[-1]
}
x=c(1:6)
y=c(10,10,10)
x[3:6] = y
index(x)
series = rep(0,length(localmax)+length(localmin))
series
odds <- seq(1, length, 2)
odds <- seq(1, 4, 2)
odds
odds = seq(1,length(localmin),2)
evens = seq(1,length(localmax),2)
series[series]
series[odds]
localmin
odds
length(localmin)
?seq
odds = seq(from=1,by=2,length.out=3)
odds
evens = seq(from=1,by=2,length.out=length(localmax))
evens
evens = seq(from=2,by=2,length.out=length(localmax))
evens
?union
intersect(localmin,localmax)
series = rep(0,length(localmax)+length(localmin))
odds = seq(from=1,by=2,length.out=length(localmin))
evens = seq(from=2,by=2,length.out=length(localmax))
for(i in 1:length(odds))
{
series[odds] = localmin[i]
}
for(i in 1:length(evens))
{
series[evens] = localmax[i]
}
series
localmin
localmax
for(i in 1:length(odds))
{
series[odds[i]] = localmin[i]
}
for(i in 1:length(evens))
{
series[evens[i]] = localmax[i]
}
series
for(i in 1:length(evens))
{
series[evens[i]] = localmax[i]
}
while(i <= length(series))
{
print(i)
i= i+1
}
i = 1
while(i <= length(series))
{
print(i)
i= i+1
}
i = 1
lmin = x[localmin[i]]
y= localmin[i]
peaks
require(quantmod)
x=seq(1,100,by=0.5)
y=x^(-1.2)
par(mfrow=c(1,3))
plot(x,y,type='l')
plot(x,log(y),type='l')
plot(log(x),log(y),type='l')
par(mfrow=c(1,1))
install.packages("RMySQL")
pt = function(t,tc,pc,k,B,b){
return(pc - (k*B/b) *(tc-t)^b))
}
pt = function(t,tc,pc,k,B,b){
return(pc - (k*B/b) *(tc-t)^b)
}
tc = 100
t = 1: 100
k = 0.7
b=0.5
B = 2
pc = 1002
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
pc = 1002
tc = 1000
t = 1: 1000
k = 0.7
b=0.5
B = 2
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
pc = 1002
tc = 500
t = 1: 500
k = 0.5
b=0.7
B = 2
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
require('shiny')
#查看示例代码的位置
system.file('examples',package='shiny')
runExample
runExample()
runExample("06_tabsets")
fluidPage
?fluidPage
library(RMySQL)
conn <- dbConnect(MySQL(), dbname = "test", username="root", password="123456",host="127.0.0.1",port=3306)
dbReadTable(conn, "tt")
dbDisconnect(conn)
help(package='shinny')
help(package='shiny')
require(quantmod)
?getSymbols
getSymbols
getSymbols.
library(dplyr)              # Data manipulation & magrittr pipe
library(ggplot2)            # General plotting
library(NMF)                # aheatmap()
library(gplots)             # heatmap.2()
library(RColorBrewer)
install.packages('gplots')
library(NMF)                # aheatmap()
library(gplots)             # heatmap.2()
install.packages('NMF')
library(NMF)                # aheatmap()
set.seed(123)
covar_mat <- matrix(c(5, 4, 4, 5), ncol = 2) # Covariance matrix
covar_mat
data <- MASS::mvrnorm(n = 10000, mu = c(0, 0), Sigma = covar_mat) %>% #Simulate correlated data
rbind(matrix(rnorm(20000, sd = 0.4), ncol = 2)) %>% # Mix with uncorrelated data
data.frame()
colnames(data) <- c("experiment_A", "experiment_B")
data
head(data)
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
geom_point(size = 3) + theme_bw(base_size = 18)
# Plot data as 2D histogram
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
stat_binhex(bins = 50) + theme_bw(base_size = 18)
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
stat_binhex(bins = 50) +
scale_fill_gradient(trans = "log", breaks = c(1, 10, 100, 1000)) +
theme_bw(base_size = 18)
install.packages('hexbin')
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
stat_binhex(bins = 50) + theme_bw(base_size = 18)
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
stat_binhex(bins = 50) +
scale_fill_gradient(trans = "log", breaks = c(1, 10, 100, 1000)) +
theme_bw(base_size = 18)
pal <- brewer.pal(name = "Blues", n = 9) %>% rev()
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
stat_binhex(bins = 50) +
scale_fill_gradientn(colours = pal, trans = "log", breaks = c(1, 10, 100, 1000)) +
theme_bw(base_size = 18)
pal <- brewer.pal(name = "YlGnBu", n = 9) %>% rev()
ggplot(data, aes(x = experiment_A, y = experiment_B)) +
stat_binhex(bins = 50) +
scale_fill_gradientn(colours = pal, trans = "log", breaks = c(1, 10, 100, 1000)) +
theme_bw(base_size = 18)
iris2 <- iris # prep iris data for plotting
rownames(iris2) <- make.names(iris2$Species, unique = T)
iris2 <- iris2 %>% select(-Species) %>% as.matrix()
# Visualize raw iris data using "Blues" Brewer palette
pal <- brewer.pal(name = "Blues", n = 9)
pal2 <- colorRampPalette(pal)(50)
heatmap.2(iris2, col = pal2,
srtCol = 0, keysize = 1, adjCol = c(0.5,1), trace = "none")
pal <- brewer.pal(name = "RdBu", n = 11) %>% rev()
pal2 <- colorRampPalette(pal)(50)
heatmap.2(iris2, col = pal2, scale = "column",
srtCol = 0, keysize = 1, adjCol = c(0.5,1), trace = "none",)
aheatmap(iris2, color = "-RdBu:50", scale = "col", breaks = 0,
annRow = iris["Species"], annColors = "Set2")
aheatmap(iris2, color = "-RdBu:50", scale = "col", breaks = 0,
annRow = iris["Species"], annColors = "Set2",
distfun = "pearson")
library(reshape2) # long <=> wide formats
# cluster rows to deterime row order
row_order <- select(iris, -Species) %>%
dist() %>%
hclust() %>%
`$`("order")
iris_melt <- iris[row_order, ] %>%
mutate(sample = make.names(Species, unique = T)) %>%
melt()
pal <- brewer.pal(name = "Blues", n = 9)
ggplot(iris_melt, aes(x = variable, y = sample, fill = value)) +
geom_tile() +
scale_fill_gradientn(colours = pal) +
theme_bw(base_size = 18)
iris_melt_z <- iris_melt %>%
group_by(variable) %>%
mutate(value_z = as.vector(scale(value)))
pal <- brewer.pal(name = "RdBu", n = 11) %>% rev()
ggplot(iris_melt_z, aes(x = variable, y = sample, fill = value_z)) +
geom_tile() +
scale_fill_gradientn(colours = pal) +
theme_bw(base_size = 18)
library(lattice)
singer
head(singer)
histogram(~height | voice.part, data = singer,
main="Distribution of Heights by Voice Pitch",
xlab="Height (inches)")
2550 * 12
?histogram
attach(mtcars)
gear
gear <- factor(gear, levels=c(3, 4, 5),
labels=c("3 gears", "4 gears", "5 gears"))
gear
cyl <- factor(cyl, levels=c(4, 6, 8),
labels=c("4 cylinders", "6 cylinders", "8 cylinders"))
densityplot(~mpg,
main="Density Plot",
xlab="Miles per Gallon")
mpg
bwplot(cyl ~ mpg | gear,
Create factors
with value labels
378 CHAPTER 16 Advanced graphics
main="Box Plots by Cylinders and Gears",
xlab="Miles per Gallon", ylab="Cylinders")
bwplot(cyl ~ mpg | gear,
Create factors
with value labels
378 CHAPTER 16 Advanced graphics
main="Box Plots by Cylinders and Gears",
xlab="Miles per Gallon", ylab="Cylinders")
bwplot(cyl ~ mpg | gear,
main="Box Plots by Cylinders and Gears",
xlab="Miles per Gallon", ylab="Cylinders")
cloud(mpg ~ wt * qsec | cyl,
main="3D Scatter Plots by Cylinders")
mygraph <- densityplot(~height|voice.part, data=singer)
plot(mygraph)
cut()
cut
?cut
displacement <- equal.count(mtcars$disp, number=3, overlap=0)
mypanel <- function(x, y) {
panel.xyplot(x, y, pch=19)
panel.rug(x, y)
panel.grid(h=-1, v=-1)
q
panel.lmline(x, y, col="red", lwd=1, lty=2)
}
xyplot(mpg~wt|displacement, data=mtcars,
layout=c(3, 1),
aspect=1.5,
main = "Miles per Gallon vs. Weight by Engine Displacement",
xlab = "Weight",
ylab = "Miles per Gallon",
panel = mypanel)
mtcars$transmission <- factor(mtcars$am, levels=c(0,1),
labels=c("Automatic", "Manual"))
panel.smoother <- function(x, y) {
panel.grid(h=-1, v=-1)
panel.xyplot(x, y)
panel.loess(x, y)
panel.abline(h=mean(y), lwd=2, lty=2, col="green")
}
xyplot(mpg~disp|transmission,data=mtcars,
scales=list(cex=.8, col="red"),
panel=panel.smoother,
xlab="Displacement", ylab="Miles per Gallon",
main="MGP vs Displacement by Transmission Type",
sub = "Dotted lines are Group Means", aspect=1)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),
labels=c("Automatic", "Manual"))
mtcars$transmission
mtcars$am
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
auto.key=TRUE)
mtcars$transmission <- factor(mtcars$am, levels=c(0, 1),
labels=c("Automatic", "Manual"))
colors = c("red", "blue")
lines = c(1,2) q points = c(16,17)
lines = c(1,2)
points = c(16,17)
key.trans <- list(title="Trasmission",
space="bottom", columns=2, w text=list(levels(mtcars$transmission)),
points=list(pch=points, col=colors),
lines=list(col=colors, lty=lines),
cex.title=1, cex=.9)
key.trans <- list(title="Trasmission",
space="bottom", columns=2,text=list(levels(mtcars$transmission)),
points=list(pch=points, col=colors),
lines=list(col=colors, lty=lines),
cex.title=1, cex=.9)
densityplot(~mpg, data=mtcars,
group=transmission,
main="MPG Distribution by Transmission Type",
xlab="Miles per Gallon",
pch=points, lty=lines, col=colors,
lwd=2, jitter=.005, key=key.trans)
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES utf8')
sql = "select id, date,title,tag,count,content  from mylog  where tag like '%2%' order by date desc"
sql =str_replace(sql,'2',iconv(keyword,from='UTF-8',to='GBK'))
data = dbGetQuery(conn,sql)
dbDisconnect(conn)
data[,'title'] = iconv(data[,'title'],from='UTF-8',to='GBK')
data[,'tag'] = iconv(data[,'tag'],from='UTF-8',to='GBK')
data[,'content'] = iconv(data[,'content'],from='UTF-8',to='GBK')
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES utf8')
library(RMySQL)
conn <- dbConnect(MySQL(), dbname = "everydaystudy", username="zhurui", password="123456",host="127.0.0.1",port=3306)
#strange here because encoding in database is utf8
dbSendQuery(conn,'SET NAMES utf8')
sql = 'select id, date,title,tag,count,content  from mylog order by date desc'
data = dbGetQuery(conn,sql)
dbDisconnect(conn)
data[,'title'] = iconv(data[,'title'],from='UTF-8',to='GBK')
data[,'tag'] = iconv(data[,'tag'],from='UTF-8',to='GBK')
data[,'content'] = iconv(data[,'content'],from='UTF-8',to='GBK')
data
head(data)
x = data[,'date']
data$week = strftime(x,'%W')
data$month = strftime(x,'%m')
data$year = strftime(x,'%Y')
require(dplyr)
?group_by
group_by(data,week,year)
groupdata=group_by(data,week,year)
head(groupdata)
summarise(groupdata,n=n())
count_n = summarise(groupdata,n=n())
count_n
count_n$week
paste(count_n$year,count_n$week)
plot(paste(count_n$year,count_n$week),count_n$n)
plot(paste(count_n$year,count_n$week,sep=''),count_n$n)
plot(paste(count_n$year,count_n$week,sep=''),count_n$n,type='l')
ungroup(groupdata)
mytags = data[,'tag']
mytags = unlist(strsplit(tags,split=',',fixed=T))
ftags = as.factor(mytags)
table(ftags)
plot(y,x,xlim=xlim)
barplot(ftags)
barplot(table(ftags))
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("C:/R/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
