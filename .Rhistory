x[38]
x[40]
x
x = c(1,2,1,2,1,2)
findPeaks(x)
findValleys(x)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmax
localmin
findPeaks(x2)
findPeaks(x,2)
x = c(1,2,1,2,1,2,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmax
localmin
x = c(2,1,2,1,2,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmax
localmin
findPeaks
which(diff(sign(diff(x, na.pad = FALSE)), na.pad = FALSE) <
0)
x
diff(x)
sign(diff(x))
require(quantmod)
x = c(2,1,2,1,2,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmax
localmin
x = c(2,1,2,1,2,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmin
localmax
x = c(2,1,2,1,2,1,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmin
plot(1:length(x),x)
require(quantmod)
getSymbols('djia')
getSymbols('omxs30')
getSymbols('OMXS30')
getSymbols('OMX30')
getSymbols('omx30')
require(quantmod)
getSymbols("^omx")
head(OMX)
findInterval(3,c(1,2,4))
?findInterval
x = c(1,2,1,2,1,2,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
require(quantmod)
x = c(2,1,2,1,2,1,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
findInterval(localmax,localmin)
localmax
localmin
x = c(1,2,1,2,1,2,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
findInterval(localmax,localmin)
localmax
localmin
findInterval(localmin,localmax)
plot(x)
localmax
x
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
localmax
localmin
= findInterval(localmax,localmin)
uppos = findInterval(localmax,localmin)
uppos = uppos[uppos!=0]
uppos
localmax
uppos = findInterval(localmax,localmin)
localmax
uppos
matrix(uppos,c(1:3))
?matrix
matrix(c(uppos,c(1:3)),ncol=2)
uppos = matrix(c(uppos,c(1:3)),ncol=2)
uppos
apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))})
apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
na.omit(uppos)
null
?na.omit
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,c(1:3)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
uppos
?filter
require(dplyr)
?filter
uppos = lapply(uppos,function(x){if(!is.null(x)) x})
uppos
uppos = lapply(uppos,function(x){if(!is.null(x[[1]])) x})
uppos
uppos = lapply(uppos,function(x){if(!is.null(x[[1]])) return(x)})
uppos
is.null(uppos[1])
is.null(uppos[[1]])
?lapply
uppos = lapply(uppos,function(x){if(!is.null(x) return(x)})
uppos = lapply(uppos,function(x){if(!is.null(x)) return(x)})
uppos
uppos = lapply(uppos,function(x){print(x)})
if
()
{}
{}
)
uppos = lapply(uppos,function(x){print(is.NULL(x))})
uppos = lapply(uppos,function(x){print(is.null(x)})
uppos = lapply(uppos,function(x){print(is.null(x))})
uppos[is.null(uppos)]
uppos[!is.null(uppos)]
uppos[!is.null(uppos),]
?list
?as.list
na.omit
?omit
??omit
??"omit"
?lapply
uppos[[2]]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,c(1:3)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
uppos
class(uppos[[2]])
uppos = vapply(uppos,function(x){if(!is.null(x)) return(x)})
uppos = vapply(uppos,function(x){if(!is.null(x)) return(x)},FUN.VALUE="integer")
uppos = sapply(uppos,function(x){if(!is.null(x)) return(x)})
uppos
uppos[-1]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,c(1:3)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
uppos
as.list(uppos,na.rm=T)
complete.cases(uppos)
uppos
?complete.cases
as.list(uppos)
?as.list
unlist(uppos)
as.list( unlist(uppos))
index(uppos)
index = c(0)
j = 1
for(i in 1:length(uppos)){
if(is.null(uppos)){
index[j]<-i
j<-j+1
}
}
uppos
uppos = uppos[-index]
uppos
index
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,c(1:3)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
uppos = sapply(uppos,function(x){if(!is.null(x)) return(x)})
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,c(1:3)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
uppos = sapply(uppos,function(x){if(!is.null(x)) return(x)})
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(downpos,c(1:3)),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
downpos = sapply(downpos,function(x){if(!is.null(x)) return(x)})
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
downpos = findInterval(localmin,localmax)
downpos = matrix(c(downpos,1:length(downpos)),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
downpos = sapply(downpos,function(x){if(!is.null(x)) return(x)})
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(downpos,1:length(downpos)),ncol=2)
downpos
downpos = findInterval(localmin,localmax)
downpos
localmax
localmin
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(c(start=x[1],end=x[2]))},MARGIN=1)
downpos
downpos = lapply(downpos,function(x){if(!is.null(x)) return(x)})
downpos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
downpos
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
uppos
xx=c(1,2)
xx
xx[0]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax(x[2]])))},MARGIN=1)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
uppos
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
uppos
downpos
x = c(1,2,1,2,1,2,1)
plot(x)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
uppos = findInterval(localmax,localmin)
uppos
localmax
localmin
?lines
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
uppos
?apply
uppos
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
uppos
downpos
lines(c(1,3),c(x[1],x[3]))
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
x = runif(n=100,1,100)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
plot(x)
plot(x,type='l')
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=localmin[x[1]],end=localmax[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
plot(x)
for(i in 1:length(uppos))
{
pos = c(uppos[[i]]$start,uppos[[i]]$end)
lines(pos,x[pos])
}
for(i in 1:length(downpos))
{
pos = c(downpos[[i]]$start,downpos[[i]]$end)
lines(pos,x[pos])
}
x = c(2,1,2,1,2,1,1)
localmax = findPeaks(x) - 1
localmin = findValleys(x) - 1
plot(x)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos
localmax
localmin
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
uppos
downpos = findInterval(localmin,localmax)
downpos
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos = apply(downpos,FUN=function(x){if(x[1]!=0) return(list(start=localmax[x[1]],end=localmin[x[2]]))},MARGIN=1)
downpos
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
uppos = apply(uppos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos
uppos = findInterval(localmax,localmin)
uppos = matrix(c(uppos,1:length(uppos)),ncol=2)
uppos = apply(uppos,FUN=function(x){if(x[1]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
if(is.null(uppos[[1]])) uppos = uppos[2:length(uppos)]
downpos = findInterval(localmin,localmax)
downpos = matrix(c(1:length(downpos),downpos),ncol=2)
downpos
downpos = apply(downpos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2])},MARGIN=1)
downpos = apply(downpos,FUN=function(x){if(x[2]!=0) return(list(start=x[1],end=x[2]))},MARGIN=1)
downpos
if(is.null(uppos[[1]])) downpos = downpos[2:length(downpos)]
downpos
if(is.null(downpos[[1]])) downpos = downpos[2:length(downpos)]
downpos
?apply
upposfilterd = list()
uppos = findInterval(localmax,localmin)
downpos = findInterval(localmin,localmax)
uppos
downpos
localmax
localmin
if(localmax[1]<localmin[1])
{
start = localmax[1]
localmax = localmax[-1]
}
x=c(1:6)
y=c(10,10,10)
x[3:6] = y
index(x)
series = rep(0,length(localmax)+length(localmin))
series
odds <- seq(1, length, 2)
odds <- seq(1, 4, 2)
odds
odds = seq(1,length(localmin),2)
evens = seq(1,length(localmax),2)
series[series]
series[odds]
localmin
odds
length(localmin)
?seq
odds = seq(from=1,by=2,length.out=3)
odds
evens = seq(from=1,by=2,length.out=length(localmax))
evens
evens = seq(from=2,by=2,length.out=length(localmax))
evens
?union
intersect(localmin,localmax)
series = rep(0,length(localmax)+length(localmin))
odds = seq(from=1,by=2,length.out=length(localmin))
evens = seq(from=2,by=2,length.out=length(localmax))
for(i in 1:length(odds))
{
series[odds] = localmin[i]
}
for(i in 1:length(evens))
{
series[evens] = localmax[i]
}
series
localmin
localmax
for(i in 1:length(odds))
{
series[odds[i]] = localmin[i]
}
for(i in 1:length(evens))
{
series[evens[i]] = localmax[i]
}
series
for(i in 1:length(evens))
{
series[evens[i]] = localmax[i]
}
while(i <= length(series))
{
print(i)
i= i+1
}
i = 1
while(i <= length(series))
{
print(i)
i= i+1
}
i = 1
lmin = x[localmin[i]]
y= localmin[i]
peaks
require(quantmod)
x=seq(1,100,by=0.5)
y=x^(-1.2)
par(mfrow=c(1,3))
plot(x,y,type='l')
plot(x,log(y),type='l')
plot(log(x),log(y),type='l')
par(mfrow=c(1,1))
install.packages("RMySQL")
pt = function(t,tc,pc,k,B,b){
return(pc - (k*B/b) *(tc-t)^b))
}
pt = function(t,tc,pc,k,B,b){
return(pc - (k*B/b) *(tc-t)^b)
}
tc = 100
t = 1: 100
k = 0.7
b=0.5
B = 2
pc = 1002
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
pc = 1002
tc = 1000
t = 1: 1000
k = 0.7
b=0.5
B = 2
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
pc = 1002
tc = 500
t = 1: 500
k = 0.5
b=0.7
B = 2
y = sapply(t,function(x){return(pt(x,tc,pc,k,B,b))})
plot(t,y)
require('shiny')
#查看示例代码的位置
system.file('examples',package='shiny')
runExample
runExample()
runExample("06_tabsets")
fluidPage
?fluidPage
library(RMySQL)
conn <- dbConnect(MySQL(), dbname = "test", username="root", password="123456",host="127.0.0.1",port=3306)
dbReadTable(conn, "tt")
dbDisconnect(conn)
options('encoding')
runApp("web")
require('shiny')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
getwd()
currentwd = getwd()
setwd("C:/R/code/everydaystudy")
sourceDir("helper")
runApp("web")
runApp("web")
runApp("web")
