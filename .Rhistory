#  print(pname)
record =afterNPeriod(pname,pdate,n=1)#afterNatrExit(pname,pdate,0.5,0.5,0.5)#
return(record)
},pdate)
records = append(records,trades)
# print(trades)
}
records = as.data.frame(do.call('rbind',records))
records = subset(records,!is.na(records[,'code']) & Open>0 & Close>0)
records = subset(records, Open>10 & Open < 20)
print(now())
profit = as.numeric(records[,'Close']) - as.numeric(records[,'Open'])
sum(profit)
max(profit)
min(profit)
length(profit[profit>0]) / length(profit)
everyyear = year(ymd_hms(records[,'opdate']))
everyyear
aggregate(x=profit,by=list(everyyear),sum)
rm(list=ls(all=T))
require(quantmod)
require(TTR)
require('dygraphs')
require('lubridate')
require('dplyr')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
sourceDir('D:/Rcode/code/RSTOCK_TRAIL/trade/wensitan/help')
sourceDir('D:/Rcode/code/RSTOCK_TRAIL/trade/wensitan/log')
sourceDir('D:/Rcode/code/RSTOCK_TRAIL/trade/wensitan/trade')
sourceDir('D:/Rcode/code/RSTOCK_TRAIL/trade/wensitan/analysis')
shindex = readSHindex()
shindex_year = to.yearly(shindex)
allcodes = readallpuredata(period='years')
mg = mget(allcodes)
years = as.character(1990:2015)
years = as.character(1995:2015)
allcodes[1]
lapply(allcodes,funciton(x){
price = get(x)
price$votile = (Cl(price) - Op(price) ) / Cl(price)
assign(x,price)
})
omit=lapply(allcodes,funciton(x){
price = get(x)
price$votile = (Cl(price) - Op(price) ) / Cl(price)
assign(x,price)
})
omit=lapply(allcodes,function(x){
price = get(x)
price$votile = (Cl(price) - Op(price) ) / Cl(price)
assign(x,price)
})
ls()
x=get('600000')
x
Cl(x)
omit=lapply(allcodes,function(x){
e = parent.env(environment())
price = get(x)
price$votile = (Cl(price) - Op(price) ) / Cl(price)
assign(x,price,envir=e)
})
x=get('600000')
x
ls()
gc()
allcodes = names(mg)
l = lapply(allcodes,function(p,date){
#print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
return(current$volatile)
}
}
,daydate)
daydate='2000'
l = lapply(allcodes,function(p,date){
#print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
return(current$volatile)
}
}
,daydate)
l = lapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
return(current$volatile)
}
}
,daydate)
p = '600000'
omit=lapply(allcodes,function(x){
e = parent.env(environment())
price = get(x)
price$volatile = (Cl(price) - Op(price) ) / Cl(price)
assign(x,price,envir=e)
})
n = mg[[p]]
n
current = n[date]
date = daydate
current = n[date]
current
nrow(current)==1 && !is.na(current$volatile)
current$volatile
mg = mget(allcodes)
current = n[date]
current
l = lapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
return(current$volatile)
}
}
,daydate)
l
l=Filter(function(x){!is.null(x)},l)
l
v = c(current$volatile)
v
current$volatile
v = c(1)
names(v)
allcodes = names(mg)
l = lapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l
l=Filter(function(x){!is.null(x)},l)
l
class(l)
?sort
sort(l)
?order
order(l)
sort.list(l)
allcodes = names(mg)
l = sapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l
class(l)
?sapply
l = lapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
l
unlist(l)
names(l)
l = lapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
lname
l
names(l)
v = list(1)
names(v) = 'v'
v
allcodes = names(mg)
l = lapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = list(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
l
names(l)
lname
l = sapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = l(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
l = sapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = list(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
lname
l
unlist(l)
l = sapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(current$volatile)
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
lname
l
allcodes = names(mg)
l = sapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(as.numeric(current$volatile))
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
lname
l
unlist(l)
l = unlist(l)
lname[1]
l = unlist(l)
l[1]
names(l) = ''
l
names(l)
names(l) = ''
names(l) = NULL
l
order(l)
?order
order(l,decreasing=T)
order(l,decreasing=T)[1:30]
lname(order(l,decreasing=T)[1:30])
lname[order(l,decreasing=T)[1:30]]
lname = lname[order(l,decreasing=T)[1:30]]
lname
lv = l[order(l,decreasing=T)[1:30]]
v
l
l[order(l,decreasing=T)[1:30]]
lv = l[order(l,decreasing=T)[1:30]]
lv
sortBeststocks = function(daydate,mg)
{
allcodes = names(mg)
l = sapply(allcodes,function(p,date){
print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(as.numeric(current$volatile))
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
l = unlist(l)
names(l) = NULL
lname = lname[order(l,decreasing=T)[1:30]]
lv = l[order(l,decreasing=T)[1:30]]
return(data.frame(code=lname,votile=lv))
}
years = as.character(1995:2015)
ld = lapply(years,function(x){
print(x)
l = followAfterUp(as.character(x),mg,ratio = 0.12,everdayratio = 0.05,upratio = 0.08,shindex=shindex,shfallratio=-0.10)
return(l)
})
years = as.character(1995:2015)
ld = lapply(years,function(x){
print(x)
l = sortBeststocks(as.character(x),mg)
return(l)
})
sortBeststocks = function(daydate,mg)
{
allcodes = names(mg)
l = sapply(allcodes,function(p,date){
# print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(as.numeric(current$volatile))
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
lname = names(l)
l = unlist(l)
names(l) = NULL
lname = lname[order(l,decreasing=T)[1:30]]
lv = l[order(l,decreasing=T)[1:30]]
return(data.frame(code=lname,votile=lv))
}
years = as.character(1995:2015)
ld = lapply(years,function(x){
print(x)
l = sortBeststocks(as.character(x),mg)
return(l)
})
ld[[1]]
ld['2008']
names(ld)
names(ld) = years
ld['2006']
ld['2008']
xx = get('600252')
x
followAfterUp(as.character(2008),mg)
followAfterUp(as.character('2008'),mg)
followAfterUp('2008',mg)
sortBeststocks('2008',mg)
date = '2008'
allcodes = names(mg)
l = sapply(allcodes,function(p,date){
# print(p)
n = mg[[p]]
current = n[date]
if(nrow(current)==1 && !is.na(current$volatile))
{
v = c(as.numeric(current$volatile))
names(v) = p
return(v)
}
}
,daydate)
l=Filter(function(x){!is.null(x)},l)
l
l['600252']
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
require('shiny')
require('stringr')
require('DT')
sourceDir <- function(path, trace = TRUE, ...) {
for (nm in list.files(path, pattern = "[.][RrSsQq]$")) {
if(trace) cat(nm,":")
source(file.path(path, nm), ...)
if(trace) cat("\n")
}
}
currentwd = getwd()
setwd("d:/Rcode/code/everydaystudy")
sourceDir("helper",encoding='utf-8')
runApp("web")
